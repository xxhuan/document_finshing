7816-7 主要描述SCQL卡数据库查询语句；
7816-8 主要描述安全操作的指令；
7816-9 主要描述卡管理指令；

DF：dedicated file，专用文件；ADF：应用专用文件；DDF：目录专用文件；
ADF/DDF可以通过文件名来查询，ADF的DF名对应其AID；
AEF只能够通过SFI来查询；
从终端角度看，ADF是一个只包含其文件控制信息(FCI)中纯数据对象的文件。
//一个AEF包含一个或多个原始基本编码规则—TLV数据对象。----- 觉得这句有问题
一个应用就是一个ADF，ADF中的有几个EF文件；
EF文件中，由多个字段构成，一个字段称为一个数据元；每个字段有特定含义；
ADF采用TLV格式编码，AEF不采用TLV格式，直接二进制码存储；
目录文件/DIR文件：SFI=0x01的文件(住建部文档P97)，它是一个EF文件，格式如下：
 


dedicated file：包含了文件控制信息(FCI)的文件，可选，大小可分配的；
DF name ：卡中唯一的DF标识，是DF文件中的FILE NAME字段，是一个数据单元；
EF：共享同一文件标识符(FID)和安全属性的的数据单元或记录或数据对象的集合；EF中的FID是短文件标识符(SFI)；
internal EF：存储由卡解释的EF数据；
working elementary file：用来存储不由卡所解释数据的基本文件；

SFI：短文件标识符；
FCI：file control information文件控制信息；

access rule：访问规则
data element：数据元，在接口处看到的信息，为它定义了名称、逻辑内容、格式和编码；
	卡中每一个应用都包括一系列的信息项，在终端成功地完成应用选择后可以对这些信息进行访问。
	一个信息项称为一个数据元，数据元是信息的最小单位，他用名称、逻辑内容说明、格式及代码来标识；
data object：数据对象，在接口处看到的信息，它由标签、长度、内容(数据员)构成；
data unit：数据单元，在一个EF支持的数据单元中可以无二义性的被引用的最少位集合；
header file：tag和len的串联；
secure messaging：一系列用于对命令-响应对的加密保护的集合；
secure environment：为了安全信息和安全操作，卡应用中一系列的组合的集合；
template：Ber-TLV数据对象的集合，该Ber-TLV的值域也是Ber-TLV数据对象，即复合Ber-TLV应用模板；

BER：基本编码规则；
EF.ARR：访问规则引用文件；
EF.ATR：复位应答文件；
EF.DIR：目录文件；



第五章 交换的设计
为实现交换指令，主要包括指令-响应部分，数据对象部分，应用和数据结构部分，安全架构部分；

5.1 指令-响应
	APDU指令格式如下表所示：
域	描述	字节长
指令头	指令类别CLA	1
	指令代码INS	1
	参数P1 P2	2
Lc域	命令数据域长度	0,1，3
命令数据域	数据域内容	Nc
Ls域	期望响应的数据Ne长度	0，1,2,3
响应数据域	响应的数据内容	Nr
响应标识	SW1 SW2	2
如果同时存在Lc和Le，则Nc和Nr必须同时是短类型或同时是扩展型；
如果卡在[历史字节或响应复位文件中]表明能处理扩展型数据，则Nc和Nr可以是扩展型，否则，卡只能处理短型数据；
	
　	Lc_value	Lc_LEN	Nc
　	NULL	0	Nc=NULL
短Lc域	01~FF	1	Nc长度1~255
扩展Lc域	00+0001~FFFF	3	Nc长度从1~65535
没有Lc，则Nc为空；
	Lc的值不为00且01~FF，表示短类型，Nc长度为1~255；
	Lc第一个字节为00，第二、三字节不为0000且0001~FFFF，表示扩展类型，Nc长度为01~65535；

　	Le_value	Le_LEN	Ne
　	NULL	0	Ne=NULL
短Le域	00	1	Ne长度=256
	01~FF	1	Ne长度1~255
扩展Le域	00+0000	2	Ne长度=65536
	00+0001~FFFF	2	Ne长度1~65535
	没有Le，则Ne为空；
	短类型格式：Le的长度1字节，值为01~FF，Ne长度为1~255；
				值为00，表示Ne长度为256；
	扩展类型格式：Le的长度为3字节，第一个字节为00，第二、三字节为0001~FFFF， Ne长度为01~65535；
				Le为000000，则Ne长度为65536；

Nr长度 <= Ne长度；如果Le不存在，则没有响应数据，Le全零，则Nr长度为256(短类型)或65536(扩展型)

P1 P2表示控制和选项参数，如果为0000，表示没有任何参数；

5.1.1描述了CLA，5.1.2描述了INS，5.1.3描述了SW1-SW2；

5.1.1 CLA指令详解
	该字段是描述指令类别的；7816-3对此有相关描述；
CLA = ’FF’是不合法的；
bit8=0，表示业内定义的指令；bit8=1 表示自定义的指令；

7816定义了两种类型的CLA，分别是000x xxxx和01xx xxxx；001x xxxx保留。
000x xxxx格式指令：
bit8,7,6为000
bit5控制命令链(=0，表示最后/唯一一条指令；=1表示不是最后一条指令)
bit4,3表明安全报文
bit2,1 表明将0~3号的逻辑信道号编码
b8	b7	b6	b5	b4	b3	b2	b1	含义
0	0	0	x	-	-	-	-	控制命令链
0	0	0	0	-	-	-	-	表示最后/唯一 一条指令
0	0	0	1	-	-	-	-	表示不是最后一条指令
0	0	0	-	x	x	-	-	SM定义(see 5.1.1.1)
0	0	0	-	0	0	-	-	没有SM/含义
0	0	0	-	0	1	-	-	SM格式
0	0	0	-	1	0	-	-	根据6.2.3.1，命令头不处理
0	0	0	-	1	1	-	-	根据6.2.3.1，命令头已认证
0	0	0	-	-	-	x	x	详见5.1.1.2，信道号为0~3

01xx xxxx格式指令：
bit8,7为000
bit6表明安全消息
bit5控制命令链
bit4~1,对信道0~15编码
b8	b7	b6	b5	b4	b3	b2	b1	含义
0	1	x	-	-	-	-	-	SM定义
0	1	0	-	-	-	-	-	没有SM/没含义
0	1	0	-	-	-	-	-	根据6.2.3.1，命令头不处理
0	1	-	x	-	-	-	-	控制命令链
0	1	-	0	-	-	-	-	表示最后/唯一 一条指令
0	1	-	1	-	-	-	-	表示不是最后一条指令
0	1	-	-	x	x	x	x	根据5.1.1.2，信道号为4~19

bit8 = 1时，表明该指令是自定义的，除了FF是非法的。应用上下文定义别的bit；

5.1.1.1 命令链
	定义了单条命令下，数据太长时的处理办法。
	如果卡支持这种方式，应该在historical字节(8.1.1)/EF.ATR(8.2.1.1)中标识出来；
bit5是用来区分是否为命令链的最后/唯一一条指令：
	bit5=1，表示该指令不是最后/唯一一条指令；
	bit5=0，表示该指令是最后/唯一一条指令。
响应标识中
	SW1-SW2=9000，表示指令已经响应结束；
	SW1-SW2=6883，表示期望获得最后一条指令；
	SW1-SW2=6884，表示不支持命令链；

5.1.1.2 逻辑信道
	命令-响应也适用于逻辑信道。如果卡支持逻辑信道，那么卡应该通过historical字节(8.1.1)/EF.ATR(8.2.1.1)中标识出最大可用的信道数。
	最大信道数<=4，表示卡只支持000x xxxx 指令；
	最大信道数>=5，表示卡支持000x xxxx 和01xx xxxx 指令；
为了支持逻辑信道，要遵守下列规则：
	CLA中将信道号编码进去；
	0号信道应永久打开，不能被关闭；
	不支持这种机制的卡，则只能使用基本信道；
	任何未被使用的其他信道应该被select指令来打开(打开的信道号被编码在CLA中)，或者被MANAGE CHANNEL指令通过open函数来打开；
	任何其他信道应该可以被MANAGE CHANNEL指令通过close函数来关闭，并支持重新使用；
	任意时刻，只能有一个信道被使用，信道间不能错位；即先收到上一条指令的响应，再发送另一条指令；
	如果file descriptor字节含义不明确，一个结构体可能打开多个信道(5.3)；比如一个DF，可能是一个ADF，也可能是一个EF；

每一个逻辑信道有自己的安全状态(5.4)，该文档不对此描述；

5.1.2 INS指令详解
	该字段是描述指令代码的，根据7816-3，6X,9X是非法的；
	下表是支持的行业内的指令：
ACTIVATE_FILE	44
APPEND_RECORD	E2
CHANGE_REFERENCE_DATA	24
CREATE_FILE	E0
DEACTIVATE_FILE	4
DELETE_FILE	E4
DISABLE_VERIFICATION_REQUIREMENT	26
ENABLE_VERIFICATION_REQUIREMENT	28
ENVELOPE	C2
ERASE_BINARY	0E
ERASE_RECORD (S)	0C
EXTERNAL_(/ MUTUAL)_AUTHENTICATE	82
GENERAL_AUTHENTICATE	86
GENERATE_ASYMMETRIC KEY PAIR	46
GET_CHALLENGE	84
GET_DATA	CA
GET RESPONSE	C0
INTERNAL_AUTHENTICATE	88
MANAGE_CHANNEL	70
MANAGE_SECURITY_ENVIRONMENT	22
PERFORM_SCQL_OPERATION	10
PERFORM_SECURITY_OPERATION	2A
PERFORM_TRANSACTION_OPERATION	12
PERFORM_USER_OPERATION	14
PUT DATA	DA
READ BINARY	B0
READ RECORD (S)	B2
RESET RETRY COUNTER	2C
SEARCH BINARY	A0
SEARCH RECORD	A2
SELECT	A4
TERMINATE CARD USAGE	FE
TERMINATE DF	E6
TERMINATE EF	E8
UPDATE BINARY	D6
UPDATE RECORD	DC
VERIFY	20
WRITE BINARY	D0
WRITE RECORD	D2

INS指令中bit1=0，没什么含义；
bit1=1，Ber-TLV按照如下规则编码：
	非链式指令，SW1!=61，则数据域应用ber-TLV格式编码；
	链式指令，并且/或者 SW1=61，允许单条指令传输大数据。因此就要对大数据进行分片单向传输，(反向没有数据传输)。当链式指令，并且/或者SW1=61时，这些连续单向的数据要采用ber-TLV格式编码；
注：目前使用的指令中INS的bit1全为0 


5.1.3响应状态详解
SW1	SW2
指令完成	指令中断
正常处理	告警处理	执行错误	验证错误
9000,61XX	62XX,63XX	64XX~66XX	67XX~6FXX

表12  SW1—SW2的编码
SW1—SW2	含      义
正常响应
‘9000’
‘61XX’	正常的处理
—无进一步限定
—SW2指示仍然有效的响应字节数
(见下面文本)
警告响应
‘62XX’

‘63XX’	报警处理
—非易失存储器状态不变化
(在SW2中进一步的限定，见表13)
—非易失存储器状态变化
(在SW2中进一步的限定，见表14)
续表12  SW1—SW2的编码
执行错误
‘64XX’

‘65XX’
	执行差错
—非易失存储器状态不变化
(SW2=‘00’，其他值都是RFU)
—非易失存储器状态变化
(在SW2中进一步的限定，见表15)
执行错误
‘66XX’	—保留供安全相关的发布使用
(本规范本部分不定义)
验证错误
‘6700’
‘68XX’

‘69XX’

‘6AXX’

‘6B00’
‘6CXX’

‘6D00’
‘6E00’
‘6F00’	校验差错
—错误的长度
—CLA的功能不被支持
(在SW2中进一步的限定，见表16)
—不允许的命令
(在SW2中进一步的限定，见表17)
—错误的参数P1～P2
(在SW2中进一步的限定，见表18)
—错误的参数P1～P2
—错误的长度Le:SW2指示准确的长度
(见下面的文本)
—指令代码不被支持或无效
—类别不被支持
—没有精确的诊断

表13  当SW1=‘62’时，SW2的编码
SW2	含      义
‘00’	没有信息被给出
‘81’	返回数据的一部分可能被损坏
‘82’	读出Le字节之前，文件/记录已结束
‘83’	选择的文件无效
‘84’	FCI未按照5.1.5格式化

表14  当SW1=‘63’时，SW2的编码
SW2	含      义
‘00’	没有信息被给出
‘81’	通过最后写入来填满文件
‘CX’	通过‘X’(值从0至15)提供的计数器
(正确的含义依赖于命令)

表15  当SW1=‘65’时，SW2的编码
SW2	含      义
‘00’	没有信息被给出
‘81’	存储器故障

表16  当SW1=‘68’时，SW2的编码
SW2	含      义
‘00’	没有信息被给出
‘81’	逻辑信道不被支持
‘82’	安全报文不被支持
表17  当SW1=‘69’时，SW2的含义
SW2	含      义
‘00’	没有信息被给出
‘81’	命令与文件结构不兼容
‘82’	安全状态不被满足
‘83’	认证方法被阻塞
‘84’	引用的数据无效
‘85’	使用的条件不被满足
‘86’	命令不被允许(无当前EF)
‘87’	期望的SM数据对象失踪
‘88’	SM数据对象不正确

表18  当SW1=‘6A’时，SW2的编码
SW2	含      义
‘00’	没有信息被给出
‘80’	在数据字段中的不正确参数
‘81’	功能不被支持
‘82’	文件未找到
‘83’	记录未找到
‘84’	无足够的文件存储空间
‘85’	Lc与TLV结构不一致
‘86’	不正确的参数P1—P2
‘87’	Lc与P1—P2不一致
‘88’	引用的数据未找到



5.2数据对象
	两种数据编码方式：Simple-TLV和Ber-TLV格式；
5.2.1 Simple-TLV数据对象
一个Simple-TLV包含两或三个域，tag(必须的) + len(必须的) + value(可选的)；
	一条记录就可能是一个Simple-TLV数据对象；
Tag长度为1字节，值为1~254，00和FF为非法的；
如果一条记录是一个Simple-TLV数据对象，则其tag可能被当做记录ID使用；
Len长度为1或者3字节；
当第一个字节不为FF时，则len为一个字节，即为长度值，从00~FE(0~254)；
	第一个字节为FF时，则len为三个字节，后两个字节表示长度值，从0000~FFFF(0~66535)；
如果len的值是00，则表示没有value域，也就是说该数据对象是空的，否则(len值>0)，value域的长度为len；

5.2.2 Ber-TLV
一个Ber -TLV包含两或三个域，tag(必须的) + len(必须的) + value(可选的) (ISO/IEC 8825-1)；
Tag由一个或多个连续字节表示；它表明了一个类，tag的第一个字节值为00是非法的；
Len由一个或多个连续字节表示；
	如果len值为0，则表示没有value域，数据对象是空的，否则(len值>0)，value域的长度为len；

5.2.2.1 Ber-TLV中tag域详解
7816中支持的tag长度为1、2、3字节，更长的字节保留；




 7816中tag的第一个字节的含义：
b8	b7	b6	b5	b4	b3	b2	b1	含义
0	0	-	-	-	-	-	-	通用类，7816中未定义
0	1	-	-	-	-	-	-	应用类，本篇文档中有定义
1	0	-	-	-	-	-	-	上下文相关类，7816中有定义
1	1	-	-	-	-	-	-	自定义类，7816中未定义
-	-	0	-	-	-	-	-	自定义编码，不采用Ber-TLV编码
-	-	1	-	-	-	-	-	采用Ber-TLV编码
-	-	-	not all set 1	短tag域，表明tag号码从0~30(1字节)
-	-	-	1	1	1	1	1	长tag域，表明tag号码大于30(如2或3字节)
注：bit5~bit1全为1时，表明tag域不止一个字节，
		后面的tag，每个字节的bit8要置为1，直到最后一个tag字节，bit8为0；
		第二个tag字节中bit7~bit1不全为0；
		从第二个tag字节开始，直到最后一个tag字节，这些字节的bit7~bit1用来表示一个tag数；

在数据域使用Ber-TLV编码，字节中可能出现00(如在EF支持的数据元素中由于擦除或修改了数据对象)。但构成数据对象的value域中有任何填补都是非法的。这样的数据对象我们称之为模板/templates。

When present in the historical bytes (see 8.1.1) or in EF.ATR (see 8.2.1.1) or in the control information of any file (see tag '82' in Table 12), the data coding byte (see Table 87) indicates whether the value 'FF' is
valid for the first byte of long tag fields of the private class, constructed encoding (explicit statement), or
invalid for the first byte of tag fields (default value), i.e., used for the same purpose (padding) and under the same conditions as the value '00'.
目前根据historical字节(8.1.1)/EF.ATR(8.2.1.1)或者任何文件的控制信息(tag=82)中，数据编码字节表示FF为
	在自定义类中，长tag域中的第一个字节为FF是合法的，构造编码(显式声明)；
	或者默认的tag域中第一个字节为FF是非法的，即用于相同目的(填补)，以及相同目的的tag值00；

多个字节的tag中，tag值中第二个字节的值从00~1E以及80都是非法的；
	在两字节长的tag中，第二个字节中，bit8=0，bit7~bit1表示tag 值，1F~7F表示tag 值从31~127；(因为tag一个字节就可以表示00~1E的值了，就不用两个字节来表示了)
	三字节长的tag中，第二个字节中，bit8=1，bit7~bit1不全零，第三个字节中，bit8=0，bit7~bit1任意值，第二个字节从81~FF，第三个值从00~7F，表示tag number从128~16383；
	综上所述，1个字节的tag可表示0~30个tag数；2个字节的tag可表示31~127个tag数；3个字节的tag可表示128~16383个tag数；

5.2.2.2 Ber-TLV中len域详解
	短格式下，len只有一个字节来表示，bit8=0，bit7~1来表示len的值；
	长格式下，len可以有两个及以上的字节来表示，第一个字节的bit8设为1，bit7~1来表示后面的字节数，7816中最多支持len为5个字节。因此，len的第一个字节为80、85、FF都是非法的。


	1st字节	2nd字节	3rd字节	4th字节	5th字节	N
1 字节	00~7F	-	-	-	-	0~127
2 字节	81	00~FF	-	-	-	0~255
3 字节	82	0000~FFFF	-	-	0~65535
4 字节	83	000000~FFFFFF	-	0~16777215
5 字节	84	00000000~FFFFFFFF	0~4294967295

5.2.3数据域，值域，数据对象和数据元详解
	何指令和响应都可以使用Ber-TLV格式进行编码，例如CLA中表示安全信息，或者INS的奇数指令(bit1=1)；
{T-L-V}或者{T-L-{T1-L1-V1}... -{Tn-Ln-Vn}}，template就可以由嵌套的Ber-TLV构成；

	一些数据域，如处理数据单元的指令中(7.2)，Simple-TLV数据对象和一些自定义的Ber-TLV数据对象中的value域是由一段一段的数据元构成的，这些数据元根据一定的指令的定义或tag的值组合在一起，构成了value域的内容；
	一些数据域，如处理记录的命令(7.3)以及一些自定义的Ber-TLV数据中的value域是由Simple-TLV数据对象构成的；
	一些数据域，如处理数据对象的命令(7.4)和Ber-TLV数据对象(模板)的value域由Ber-TLV数据对象构成的； 

5.2.4 数据元素的鉴定
数据元素的鉴别有如下的原则：
1. 如果用来表示数据元的bit数不是8的整数倍，那么需要采用一些规则将这些bit映射到一个或一串字节中。除非另有规定，应该从最后一个字节的第一个bit开始，适当的bits被置1用来表示数据元；
2. 在卡接口和设备接口处，一个数据元应该出现在Ber-TLV数据对象中的value域处；
3. 为达到内部交换、引用等目的，一个数据元可以与Ber-TLV数据对象中的tag值相关联的，而且数据元是被封装在这个数据对象中的；
4. 一个数据元可以通过Ber-TLV tag被直接引用。通过设置数据元所属的上下文，数据元可以与另外一个数据元相关联；
5. 一个或多个command-to-perform数据对象不能直接引用一个数据元；
	6. 如果存在，通用类的数据对象(第一个字节为01~3F)有自己的含义；
	7. 除非另有规定，所有的应用类(第一个字节为40~7F)的数据对象是行业内部定义好了的。7816文档分配好了应用类所使用的tag值。未定义的tag值保留；
	8. 本文档定义了许多业内使用的数据元。此外为定义更多的业内使用的数据元，7816-6文档中包含了一个详尽的列表来说明7816所定义到的数据元；
	9. 卡中可能包含很多相同的业内定义的数据对象；
	10. 在指令-响应数据域中，所有的上下文相关类(第一个字节为80~BF)的数据对象应当被内嵌在业内模板(interindustry templates)中，除了FCI(5.3.3)和SM(6)；
	11.为了定义数据域中业内的数据对象，附录A中说明了接下来的协议中tag的分配方案。如果有需要，这些tag分配方案使用下表中的数据对象，用来告知负责tag分配的使用方；


表9 业内数据对象的tag分配说明
　Tag	行业内的tag分配
06	数据对象定义(按照8825-1编码，附录A)
41	国家代码(按照3166编码)
42	自定义代码(按照7812-1编码)
4F	应用代码(AID，按照8.2.1.2编码)
注：这里tag=4F，和住建部规范中P97页中E.3目录信息文件中对应用模板的描述相对应；
	tag=4F，后接DDF名称，DF名与AID对应

5.2.4.1 兼容的tag分配方案

这些tag分配方案使用业内的数据对象以及其它数据对象；
	这些数据对象应被嵌套在业内的模板格式中，通过tag为70~77来引用 (除了73保留给嵌套自定义的数据对象，5.2.4.3)；
	上下文特定类(第一个字节为80~BF)使用的业内模板是tag为65(持卡人相关信息)，66(卡数据)，67(身份验证数据)，6E(应用相关数据)；该模板不是很提倡使用；
	为了定义一个兼容的tag分配方案以及对该方案负责，一个模板通过引用tag=78来实现；如果存在，如上述的一个模板应当包含上表中的某个数据对象，用以定义一个tag分配权利(authority)；
	如果tag=78是在初始化数据串/EF.ATR中存在的，则该权利(authority)在卡中是合法的；
	如果tag=78在DF管理数据中存在，那么该权利(authority)在DF中是合法的；

5.2.4.2 并存的tag分配方案
这些tag分配方案可能使用7816中未定义的tag。为定义该方案，tag=79；如果存在，如上述的一个模板应当包含上表中的某个数据对象，用以定义一个tag的分配权利；
	如果一个权利在卡中是合法的，那么tag=79应当存在在一个初始化数据串/EF.ATR；
	如果一个权利在DF中是合法的，那么tag=79应当存在在DF管理数据中；
在上述的方案中，所有的业内数据对象应当被内嵌在业内模板中，通过tag=7E被引用出来；此外，tag79，tag=7E不应该再被赋予其他的含义，同样的62(FCP)、64(FMD)、6F(FCI)、7D(SM模板)，也不该被赋予别的含义；

5.2.4.3 独立的tag分配方案
	这些tag分配方案使用了7816中tag的其他解释，但不遵守5.2.4.2节的定义。该tag方案不允许内部交换，也不遵守7816-4文档。
	业内自由裁量的数据对象的使用，采用tag=53来描述自由数据元素；采用tag=73在自由裁量的模板中嵌入数据对象，这就允许了数据元素和数据对象在本文档中向下兼容的使用。


5.3 应用和数据的架构详解
本节讨论应用和数据在接口层面所展示的结构；这些数据在卡中如何存储的本文档不描述；

DF dedicated file：专有文件，其中有个特殊的根目录MF；
EF elementary file：基本文件，存放具体的应用等数据；
	-- 内部EF文件，保存了由卡解释的数据，如为实现管理和控制，被卡使用的数据；
	-- working EF文件，保存了不由卡解释的数据，如只给外部使用的数据；
 
除了上述的文件系统外，还有一种平行的文件系统，各个文件都是独立的，其中没有MF，如下图所示：
 

5.3.1 文件选择
5.3.1.1 文件选择方式
	通过选择文件，才可以获取文件中的数据。其可以被隐式的选择，也可被显示的选择；下面是几种选择文件的方法：
通过DF名引用 –- 可以通过DF名来选择文件，AID就表示了DF名，AID最多有16个字节，一张卡中的每个AID应该是独一无二的；
通过文件标识符FID引用 – FID由两个字节表示，3F00表示一个MF，FFFF、3FFF、0000等保留使用，为了无异议的通过FID选择文件，FID应也被设计成唯一的；
通过路径引用 – 路径是一串联系的FID，路径由一个FID开始(从MF开始的为绝对路径；从当前DF开始的为相对路径)，到选中的文件FID结束。路径总是从父到子的。如果你不知道当前的DF的FID，那么可用3FFF代替当前的FID。3F002F00和3F002F01保留；
通过短EF标识符SFI引用 – 通过SFI来选择一个EF文件，它由5个不全等的bit来选择。因此选择范围为1~30。00000表示当前的EF。在MF层，11110为保留。SFI不能作为一个路径或一个EF标识；
如果支持，通过SFI来选择应当指明：
如果在historical byte 或者EF.ATR中的第一个软件功能表(表86)存在，那么在卡层面，这个指示是合法的；
如果SFI(tag=88)存在在一个EF的控制参数中，那么在EF层面中，这个指示是合法的；

5.3.1.2 文件引用数据元
tag=51表示引用的数据表示一个文件，它包含了一定的长度；
一个空白的数据对象表示MF；
	如果长度值为1，bit8~4不全相等，bit3~1是000，那么bit8~4表示1~30的短EF标识；
	如果长度值为2，数据对象表示一个FID；
	如果长度值超过2，则数据元表示一个路径；
如果长度是偶数，且前两个字节是3F00，则该路径是绝对路径，路径从MF标识开始，至少2个FID串联的；
如果长度是偶数，且前两个字节不是3F00，则该路径是相对路径，路径从当前的DF标识开始，至少2个FID串联的；
如果长度是奇数，则路径是有限的，数据对象也是一个不包含3F00的绝对路径，或者不包含当前DF的一个相对路径，使用P1作为参数补充说明；
tag	len	value
51	0	一个空的数据对象表示MF
	1	短EF标识符(bit8~4表示0~30，bit3~1置零)
	2	FID
	>2的偶数	绝对路径(头两个字节为3F00)
		相对路径(头两个字节不为3F00)
	>2的奇数	有限的路径(需要结合P1参数来补充定义)

5.3.2 数据引用方法
在DF中，数据会被引用成数据对象data object。DF在接口处可看做是通过引用命令的一套data object，
在EF中，数据会被引用成数据单元data units，记录文件records，数据对象data objects。数据引用方式是依赖EF特性的，定义了三种EF结构。
	透明结构：在接口处EF可看作为一序列数据单元；即就是一串有特定含义的二进制串；
	记录结构：在接口处EF可看作为一序列各自可标识的记录；记录长度是可变的，也可以是定长的，组织可以是线性结构或是循环结构的；
	TLV结构：是一个TLV结构；
五种EF的结构：透明EF、线性定长EF、线性可变EF、定长循环EF、TLV-EF；
 

5.3.3 文件控制信息 FCI
根据定义，文件控制信息是字节串用来响应select指令的，它基本在DF、EF中均存在；
	注：目前软卡中FCI的内容为写死的，在softcard/container/src/Softcard_api.c 826行：
//this variation only used in select api's return value.
static uint8 fci_dedicate_file[] = {
0x00, 0x00, 0x00, 0x00, 0x9F, 0x0C, 0x1E, 0x4C, 0x59, 0x13, 0x62, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x62, 0x90, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0x20, 0x15, 0x12, 0x18, 0x20, 0x25, 0x12, 0x18, 0x00,
    0x00
};
下面是我们软卡中select一个DDF后的返回数据：
6F 32  84  09 A0 00 00 00 03 86 98 07 01   A5   25  00 00 00 00 9F 0C 1E 4C 59 13 62 00 00 00 00 00 00 13 62 90 01 00 00 00 00 00 01 20 15 12 18 20 25 12 18 00 00


如果第一个字节是00~BF，那么该数据是采用Ber-TLV编码格式，其中值17保留；
如果第一个字节是C0~FF，表明该数据没有采用7816文档的编码格式编码；

表11是三种tag的Ber-TLV编码格式的数据模板：
--FCP(file control parameters)模板是一个文件控制参数的集合，如表12中列出的。在FCP模板中，上下文相关类(第一个字节从80~BF)为FCP保留，tag85和A5表示任意的数据；
--FMD(file management data)模板是一个文件管理数据的集合，即业内定义的数据对象，如8.2.1.2中定义的应用标识AID、8.2.1.4定义的应用标签、7816-6中定义的应用截止数据、8.2.1.3中定义的一个内嵌的应用模板。在FMD模板中，tag53和73表示任意的数据；
--FCI(file control information)模板是一个文件控制数据和文件管理数据的集合；

表11 业内使用的FCI模板
tag	value
62	设置文件控制参数(FCP模板)
64	设置文件管理数据(FMD模板)
6F	设置文件控制和管理数据(FCI模板)

上述三种模板可以被select指令中的参数所检索出来；
--如果FCI选项被选中，那么在响应数据域中，FCI tag是可选的，用以引出模板；
--如果FCP或FMD选项被选中，那么类似的tag是强制使用的，用以引出模板；

	表12是FCP的列表，所有的上下文相关类。当一个文件中的控制参数存在，下表描述了它是否仅出现一次(明确指明的)，还是它是可重复的(无含义的)；
表12 文件控制参数
tag	L	值	适用于
80	可变	在文件中的数据字节数，不包括结构信息	任何EF文件
81	2	在文件中的数据字节数，如果有，包括结构信息	任何文件
82	1	文件描述符字节	任何文件
	2	文件描述符字节后面紧跟着数据编码字节	任何文件
	3或4	文件描述符字节后面紧跟着数据编码字节和最大记录长度	带有记录结构EF文件
	5或6	文件描述符字节后面紧跟着数据编码字节和最大记录长度和记录数	
83	2	文件标识符	任何文件
84	1～16	DF名称	DFs
85	可变	专有信息，不采用Ber-TLV编码	任何文件
86	可变	自定义的安全属性编码	任何文件
87	2	包含扩充FCI的EF标识符	任何DF文件
88	0或1	短EF标识	任何EF文件
8A	1	生命周期状态字节	任何文件
8B	可变	安全属性编码引用扩展格式	任何文件
8C	可变	安全属性在紧凑的格式	任何文件
8D	2	EF的标识，包含安全环境模板	DFs
8E	1	信道安全属性	任何文件
A0	可变	数据安全属性模板	任何文件
A1	可变	自定义的安全属性编码	任何文件
A2	可变	一个或多个数据模板，短EF标识(tag88)-文件引用(tag51)	DFs
A5	可变	采用Ber-TLV编码的自定义数据	任何文件
AB	可变	引用扩展格式的安全属性模板	任何文件
AC	可变	加密机制的标识模板	DFs
本文档中保留了其他的tag值，第一个字节为80~BF
在同一个应用下，有可能出现一个DF的部分控制信息出现在了一个EF里，在FCP中使用tag=87来引用。如果存在这种情况，FCI应该被合适的tag引用，而既不是FCP tag也不是FCI tag。[没有例子]

5.3.3.1 短EF标识
tag=88，用来描述EF的控制参数：
--如果卡支持通过短EF标识选择指令，而且tag=88是不存在的，那么FID的第二个字节(tag=83)中，bit5~1用来编码短EF标识(SFI)；
--如果tag=88存在且长度值为0，则，EF支持无SFI；
--如果tag=88存在且长度设为1，且数据元字节中bit8~4不全等，并且bit3~1为000，那么bit8~4为短EF标识SFI(值为0~30)；

5.3.3.2 生命周期状态字节
卡片、文件以及其他对象均有一个生命周期。生命周期状态允许卡片和接口设备来定义卡的使用时、文件及别的对象的不同的逻辑安全状态。
为支持这种灵活的生命周期管理(7816-9)，本文档定义了四种状态：
创建态；		初始态；			操作态；			结束态；
creation state,		initialisation state,		operational state,		termination state

LCS(life cycle status)字节表示生命周期状态字节，由下表定义：
	00~0F 是业内定义的；10~FF是自定义的
表13 生命周期状态字节
b8	b7	b6	b5	b4	b3	b2	b1	含义
0	0	0	0	0	0	0	0	无信息
0	0	0	0	0	0	0	1	creation state
0	0	0	0	0	0	1	1	initialisation state
0	0	0	0	0	1	-	1	operational state(活动的)
0	0	0	0	0	1	-	0	operational state(非活动的)
0	0	0	0	1	1	-	-	termination state
不全为零	x	x	x	x	自定义的
其他的作为保留

通过使用tag=8A，来引用卡生命周期状态数据；
卡生命周期状态如存在应在historical byte(8.1.1.3)；
通过使用tag=48，来引用在EF.ATR(8.2.1.1)的卡生命周期状态数据；
如果是一个MF，卡状态至少在creation态；
除非另有说明，否则，安全属性在operational state下有效。

5.3.3 文件描述符字节
通过使用tag=82，数据元表示是文件中的控制参数；(表12)
--数据的第一个字节为文件描述字节(表14)；
--如果这个数据元有多个字节构成，第二个字节表示数据编码字节(表87)。
如果卡在某些地方提供了数据编码字节，那么这个文件描述字节紧跟着数据编码字节；
表14 文件描述符字节
b8	b7	b6	b5	b4	b3	b2	b1	含义
0	x	-	-	-	-	-	-	文件权限
0	0	-	-	-	-	-	-	不可分享
0	1	-	-	-	-	-	-	可分享文件
0	-	1	1	1	0	0	0	DF
0	-	不全为一	-	-	-	EF类型
0	-	0	0	0	-	-	-	工作EF
0	-	0	0	1	-	-	-	内部EF
0	-	任意值	-	-	-	自定义的EF类型
0	-		　	EF结构
0	-	不全为一	0	0	0	无信息
0	-	不全为一	0	0	1	透明文件结构
0	-	不全为一	0	1	0	定长线性文件结构
0	-	不全为一	0	1	1	定长线性文件结构，TLV编码格式
0	-	不全为一	1	0	0	线性变长文件结构
0	-	不全为一	1	0	1	线性变长文件结构，TLV编码格式
0	-	不全为一	1	1	0	定长循环文件结构
0	-	不全为一	1	1	1	定长循环文件结构，TLV编码格式
0	-	1	1	1	0	0	1	Ber-TLV编码格式
0	-	1	1	1	0	1	0	Simple-TLV编码格式
本文档中其他值作为保留；
“可分享的”表示至少支持文件可由不同的逻辑信道同时访问；


5.4 安全架构

5.4.1 综述
本节主要讨论安全状态，安全属性和安全机制。

安全状态 – 表示完成下列动作后当前可能进入的状态：
复位应答(ATR)；可能的协议类型和属性选择；和/或
单个命令或一序列命令，可能执行的认证流程。
	安全状态也可以从完成与所包含实体(如果有)的标识有关的安全规程中产生，例如：
		通过验证一个密码(使用VERIFY指令)；
		通过验证一个key(使用GET CHALLENGE紧跟一个EXTERNAL AUTHENTICATE指令)；
		使用一系列的GENERAL AUTHENTICATE指令；
		通过安全报文(如报文认证)；
	四种安全状态如下：
--全局安全状态：在一个使用DF层级的卡中，当一个MF相关的认证流程结束，全局安全状态可能被修改了(比如密码实体认证或附于MF的密钥)；

--应用特定安全状态：当一个应用相关的认证流程结束时，其安全状态会被改变(比如密码实体认证或附于应用的密钥)；通过应用选择，其安全状态可能会保持、被覆盖、丢失；这种安全状态的修改，只和其认证流程的所属应用相关。如果逻辑信道请求，则其应用相关的安全状态由这个逻辑信道决定；

--文件特定安全状态：当一个DF相关的认证流程结束时，其安全状态会被改变(比如密码实体认证或附于相关DF的密钥)；通过应用选择，其安全状态可能会保持、被覆盖、丢失；这种安全状态的修改，只和其认证流程的所属应用相关。如果逻辑信道请求，则其文件相关的安全状态由这个逻辑信道决定；

--指令特定状态：它仅在处理一个使用了安全报文以及涉及到认证的指令时存在；这样的指令可能使其他安全状态保持不变；


安全属性 – 当安全属性存在时，它定义了允许的动作以及允许的条件。文件中的安全属性定义了它的分类(DF或EF)，以及FCI中的可选参数，和/或它们的父辈文件。安全属性也可以与指令、数据对象、表以及视图相关。尤其的，安全属性可以：
-- 在访问数据时，指定卡中的安全状态为有效的；
	-- 如果卡处于某种特定状态，指定数据只支持特定功能(如只读)；
	-- 定义安全函数能被执行，以获取一个特定的安全状态；


安全机制 --本规范本部分定义了下列安全机制:
--使用密码的实体鉴别：卡对从外界接收到的数据同保密的内部数据进行比较。该机制可以用来保护用户的权利。

--使用密钥的实体鉴别：待鉴别的实体必须按鉴别规程(例如，使用“GET CHALLENGE”命令后面紧跟着“EXTERNAL AUTHENTICATE”命令)来证明了解的相关密钥。

--数据鉴别：使用保密的或公开的内部数据，卡校验从外界接收到的冗余数据。另一种方法是使用保密的内部数据，卡计算数据元(密码的校验和或者数字签名)，并且将其插入发送给外界的数据中。该机制可以用来保护提供者的权利。

--数据加密：使用保密的内部数据，卡解密在数据字段中接收到的密文。另一种方法是，使用秘密的或公开的内部数据，卡计算密码，并将其插入数据字段中，尽可能与其他数据一起进行。该机制可以用来提供保密性服务，例如，用于密钥管理和有条件的访问。除了密码机制外，数据保密性可以通过数据伪装来获得。在此情况下，卡计算伪装字节串，并通过“异或”运算将其加到从外界接收到的数据字节中，或将其加到发送给外界的数据字节中。该机制可以用来保护秘密，并且减少报文过滤的可能性。
鉴别的结果可以按照应用的要求被登录到内部EF中。

5.4.2 标识模板的加密机制
	通过tag=AC，一个或多个有加密机制的标识模板在DF的控制参数中存在。每一个都明确地指明了在DF及其层级中的一个加密机制的含义。这样一个模板一般包含两个或多个数据对象：
-- 第一个数据对象应该表示加密机制，tag=80；(表33)
-- 第二个数据对象应该是一个对象ID，tag=06(定义在了8825-1)。标识的对象应该是一种指定的或是注册的加密机制。加密机制比如有加密算法、信息认证、认证协议、数字签名、注册加密算法等等；
-- 如果后续还有数据，应该指定一种机制，tag=06，在此之前的机制(如一种操作的模式，如hash函数)，或者指定参数(由之前的机制来决定tag)

例：
{AC-0B-{80-01-01}-{06-06-28818C710201}
tag1=AC，len1=0B
tag2=80，len2=01，value=01 表明采用10833-2中定义的01号加密算法
tag3=06，len=06，value=28818C710201

{'AC' - '11' - {'80'-'01'-'02'} - {'06'-'05'-'28CC460502'} - {'06'-'05'-'28CF060303'}}
The first object identifier refers to the second authentication mechanism in ISO/IEC 9798-5[8]. The second object identifier refers to the third dedicated hash-function in ISO/IEC 10118-3[12]. Therefore the template associates the local reference '02' to GQ2 using SHA-1.
第一个对象标识符引用9798-5中的第二个认证机制；
第二个对象标识符引用了10018-3中的第三个声明的hash算法；
因此这个模板结合了本地引用’02’到GQ2使用sha1算法；

5.4.3 安全属性
通过tag=86、8B 、8C、 8E、 A0、 A1、 AB，在文件中的控制参数中说明安全属性是存在的。卡里的对象，如指令、文件、数据对象、表、视图等，可能有多种安全属性，包含在一个安全属性的引用；
通过tag=A0，一个数据对象的安全属性模板会在文件的控制参数中。这个模板是一些安全属性数据对象(tag=86 8B 8C 8E A0 A1 AB)的串联，一个tag列表数据对象包含了文件中相关的数据对象。
通过tag=8E，一个信道的安全属性模板会在文件的控制参数中，根据下表中，来确定在某种安全环境中的含义：
表15信道安全属性
b8	b7	b6	b5	b4	b3	b2	b1	含义
0	0	0	0	0	-	-	1	不可分享的
0	0	0	0	0	-	1	-	安全的
0	0	0	0	0	1	-	-	用户自定义的
其余保留

在SCQL(7816-7，结构化的卡查询语句指令)环境中，安全状态可以在SCQL选项中被指定，如CREATE TABLE和CREATE VIEW指令等。如果安全属性是基于本文档的，则安全状态需要在SCQL操作的安全属性参数中的tag=8B、8C或AB时，在数据对象中传输。

编码格式 -- 安全属性中有两种编码格式，分别是基于位图的紧凑格式和TLV列管理的扩展格式
5.4.3.1 紧凑格式
	在紧凑格式下，访问规则由如下构成：一个访问模式字节，以及一个或多个安全条件字节。对数据的访问控制，是通过对相关数据对象的绑定访问规则来管理的。一个数据对象中tag=8C，value域中存在一些访问规则，则其表示一个OR条件。

访问模式字节 – bit7~1中每一个bit置0时表示一种安全条件字节的空缺，置1时表示一种安全条件字节的存在。bit8=1时，bit7~4作为附加指令使用，如应用相关指令。

	表16~19定义了访问模式字节在DF、EF、数据对象、表和视图中的含义。
表16 DF的访问模式字节
b8	b7	b6	b5	b4	b3	b2	b1	含义
0	-	-	-	-	-	-	-	根据此表定义bit7~1
1	-	-	-	-	-	-	-	根据此表定义bit3~1(bit7~4自定义)
0	1	-	-	-	-	-	-	DELETE FILE(self)
0	-	1	-	-	-	-	-	TERMINATE CARD USAGE(MF),TERMINATE DF
0	-	-	1	-	-	-	-	ACTIVATE FILE
0	-	-	-	1	-	-	-	DEACTIVATE FILE
-	-	-	-	-	1	-	-	CREATE FILE(创建DF文件)
-	-	-	-	-	-	1	-	CREATE FILE(创建EF文件)
-	-	-	-	-	-	-	1	DELETE FILE(child)

表17 EF的访问模式字节
b8	b7	b6	b5	b4	b3	b2	b1	含义
0	-	-	-	-	-	-	-	根据此表定义bit7~1
1	-	-	-	-	-	-	-	根据此表定义bit3~1(bit7~4自定义)
0	1	-	-	-	-	-	-	DELETE FILE
0	-	1	-	-	-	-	-	TERMINATE EF
0	-	-	1	-	-	-	-	ACTIVATE FILE
0	-	-	-	1	-	-	-	DEACTIVATE FILE
-	-	-	-	-	1	-	-	WRITE BINARY,WRITE RECORD,APPEND RECORD
-	-	-	-	-	-	1	-	UPDATE BINARY,UPDATE RECORD,ERASE BINATY,ERASE RECORD
-	-	-	-	-	-	-	1	READ BINARY,READ RECORD,SERACH BINARY,SEARCH RECORD

表18 数据对象的访问模式字节
b8	b7	b6	b5	b4	b3	b2	b1	含义
0	-	-	-	-	-	-	-	根据此表定义bit7~1
1	-	-	-	-	-	-	-	根据此表定义bit3~1(bit7~4自定义)
0	x	x	x	x	-	-	-	000(别的值保留)
-	-	-	-	-	1	-	-	MANAGE SECURITY ENVIRONMENT
-	-	-	-	-	-	1	-	PUT DATA
-	-	-	-	-	-	-	1	GET DATA

表19 表和视图的访问模式字节
b8	b7	b6	b5	b4	b3	b2	b1	含义
0	-	-	-	-	-	-	-	根据此表定义bit7~1
1	-	-	-	-	-	-	-	根据此表定义bit3~1(bit7~4自定义)
0	1	-	-	-	-	-	-	CREATE USER,DELETE USER
0	-	1	-	-	-	-	-	GRANT,REVOKE
0	-	-	1	-	-	-	-	CREATE TABLE,CREATE VIEW,CREATE DICTIONARY
0	-	-	-	1	-	-	-	DROP TABLE,DROP VIEW
-	-	-	-	-	1	-	-	INSERT
-	-	-	-	-	-	1	-	UPDATE,DELETE
-	-	-	-	-	-	-	1	FETCH

安全条件字节 – 每个安全条件字节指明了安全机制是必要的，用以适配访问规则。表20描述了安全条件字节。
表20 安全条件字节
b8	b7	b6	b5	b4	b3	b2	b1	含义
0	0	0	0	0	0	0	0	没有条件
1	1	1	1	1	1	1	1	绝不
-	-	-	-	0	0	0	0	没有表示安全环境
-	-	-	-	不全相等	安全环境标识符(SEID字节，6.3.4) 1~14
-	-	-	-	1	1	1	1	保留
0	-	-	-	-	-	-	-	至少一个条件
1	-	-	-	-	-	-	-	所有的条件
-	1	-	-	-	-	-	-	安全报文
-	-	1	-	-	-	-	-	外部认证
-	-	-	1	-	-	-	-	用户认证

bit8~5表示所需要的安全条件。如果bit4~1不全等，则bit4~1定义了一个安全环境(SEID字节从1~14)，在安全环境中定义的机制应当根据bit7~5所指定的含义来确定，用以指令保护、外部认证、用户认证。
-- 如果bit8=1，则bit7~5中所有的条件都应该被满足；
-- 如果bit8=0，则bit7~5中至少有一个条件应当被满足；
-- 如果bit7=1，则控制引用模板(control reference template，6.3.1)，安全环境的安全引用模板由bit4~1来定义。换句话说，一个SEID字节从1至14，(描述是否是安全报文)适用于指令数据域，和/或 响应数据域(表35，usage qualifier byte)。

5.4.3.2 扩展格式
	在扩展模式下，访问规则由如下构成：一个访问数据对象以及紧跟着的一个或多个安全条件数据对象。对数据的访问控制，是通过对相关数据对象的关联访问规则来管理的。一个tag=AB的模板表示文件中的控制参数用以标识这些访问规则。

访问模式数据对象 – 访问模式数据对象既不包含一个访问模式字节，也不包含一个命令描述列，或者一个自定义的状态机制描述。随后的安全条件数据对象和指示的命令是相关的。表21说明了访问模式数据对象。

表21 访问模式数据对象
Tag	Length	value	含义
80	1	访问模式字节	看表16~19
81~8F	可变	指令头描述	指令头列表，表22
9C	可变		自定义的状态机制描述
如果tag是81~8F，则访问模式字节数据元表示4字节的CLA，INS，P1和P2可能的值的组合。根据tag中的bit4~1，来描述，详见表22。某些组合可能存在，是因为其定义了一些命令的集合，如INS P1 P2，INS P1 P2，tag=87。

表22  tag81~8F访问模式数据对象
b8	b7	b6	b5	b4	b3	b2	b1	含义
1	0	0	0	x	x	x	x	指令描述包含：
1	0	0	0	1	-	-	-	CLA的值
1	0	0	0	-	1	-	-	INS的值
1	0	0	0	-	-	1	-	P1的值
1	0	0	0	-	-	-	1	P2的值
CLA的值应当将信道号的设为0，表示逻辑信道的描述是独立的
INS的值应当设为偶数，表示数据域格式指示的描述是独立的

安全条件数据对象 – 根据表23，安全条件数据对象定义了访问被自定义访问模式数据对象保护的数据的安全行为。如果被用作一个安全条件，一个控制应用模板可以被tag=A4，B4，B6，B8等引用。其应该包含一个使用资格数据对象，该对象指明了一个安全行为。

表23 安全条件数据对象
Tag	Length	value	含义
90	0	-	总是
97	0	-	从不
9E	1	安全条件字节	看表20
A4	可变	控制引用模板	根据使用资格使用外部或用户认证
B4,B6,B8	可变	控制引用模板	根据使用资格决定在指令和/或响应的SM
A0	可变	安全条件对象	至少一种安全条件应当被支持(OR 模板)
A7	可变	安全条件对象	安全条件的倒置(NOT 模板)
AF	可变	安全条件对象	每一种安全条件都要支持(AND 模板)

	一些安全条件数据对象可能和一些相同的操作相联系：
-- 如果安全条件数据对象被嵌套在一个OR模板(tag=A0)中，则在动作之前，至少一种安全条件需要被支持；
-- 如果安全条件数据对象未被嵌套在一个OR模板(tag=A0)中，或它被嵌套在一个AND模板(tag=AF)中，则在动作之前，每一种安全条件都需要被支持；
-- 如果安全条件数据对象被嵌套在一个NOT模板(tag=A7)中，则安全条件直到它们不被支持时才为真。

5.4.3.3 访问规则引用
	在扩展格式中，访问规则应当被存储在一个支持线性结构的EF中，EF中含有大小可变的记录。这样的一个EF称之为EF.ARR。一个或多个访问规则被存放在每个记录中，可用记录号来引用它们。这些记录号称之为ARR字节。表24是对一个EF.ARR的描述。

表24 EF.ARR布局
记录号(ARR字节)	记录内容(一个或多个访问规则)
1	访问模式数据对象，一个或多个安全条件数据对象，访问模式数据对象，……
2	访问模式数据对象，一个或多个安全条件数据对象……

通过tag=8B，在文件的控制参数中会存在引用安全属性数据对象，表示扩展格式(看表25)。
-- 如果len的值是1，则value域表示一个ARR字节，表示在一个暗含已知的EF.ARR中的一个记录；
-- 如果len的值是3，则value域是一个FID，紧跟着一个ARR字节；FID表示EF.ARR，ARR字节则表示在EF.ARR的记录号；
-- 如果len的值是偶数，且大于3，则value域是一个FID，紧跟着一个或多个字节对。每个字节对由一个SEID字节和一个ARR字节构成；SEID字节表示安全环境，ARR字节指定访问规则。

表25 扩展格式的安全属性数据对象
Tag	Length	value
8B	1	ARR字节
	3	FID+ARR
	偶数,>3	FID+[SEID+ARR]+[SEID+ARR]……

当前SE的ARR字节表明访问当前ADF是合法的。
如果在指令MANGE SECURITY ENVIRONMENT 中没有SE被设置，则默认SE为当前SE。

5.4.4 安全支撑数据元
	本节定义了安全支撑数据元的集合，这些数据元有规则规定了它们的value被使用的方式。这些数据元扩展并精炼了控制引用数据对象。卡片能够支持它们作为一个应用使用的安全机制的通用的支撑。应用可能引用它们作为一个安全报文和一个安全选项(7816-8)。本节既不指定一些安全支撑数据元的一些特性(如长度)。也不指定修改其值的算法。

原则 – 卡片需按如下描述保存且使用安全支撑数据元额值：
-- 更新的新值要不是通过卡片的计算，就是由外部提供。与指定的规则保持一致，指定规则为一个安全支撑数据元的指定类型。
-- 更新在输出产生之前已经计算完成，为了指令完成一次升级。更新独立于指令的完成状态的。如果一个值在一次操作中，被一个应用使用，引起了一次更新，那么该更新在该值被使用前更新完成。
-- 访问应用相关的安全支撑数据元是被指定应用所约束的。

注：事实上在指令-响应对中，最终安全的实现还是依靠应用中指定的算法和协议；卡片仅提供这些数据元以及关联的使用规则。

数据元 – 卡片通过称为progression value的数据元来支持指令-响应对的安全。通过卡片的使用增加指定的事件，每当卡片激活时这些值都是不一样的。两种progression value被定义的：卡会话计数器和会话标识符。
-- 每当卡被激活一次，卡会话计数器加一；
-- 会话标识符从卡会话计数器和外部提供的数据计算而来；

两种progression value类型被定义：
-- 内部progression value，如果为一个应用指定这样一个值，则注册计数器的数的特定事件会被执行。数据元会在上述事件完成后变长。卡片应提供一个复位函数给这些计数器以便它们可以归零。内部progression value不能够被外部所控制，而且适合作为卡内部近似实时安全的使用。它们的值可以在加密计算时使用。
-- 外部progression value，如果为一个应用指定这样一个值，则只能从外部传进来更新。新值应当在数字上比卡片存储的值要大。

引用 – 卡片应当按照如下规则提供安全支撑数据元值的访问：
-- 一个MF下应该存在一个EF，如一个卡会话计数器；或者在一个ADF中，比如一个应用相关的progression value；
-- 在一个控制引用模板中存在一个附加的数据对象(tag=88、92、93，表33)。这些tag可用在SE支持这些数据元明确的使用 的情况下；
-- 在业内模板中，tag=7A，上下文相关类(第一个字节从80~BF)保留，表26列出的安全支撑数据对象。

表26 安全支撑数据对象
Tag	value
7A	安全支撑数据对象的集合，后跟着如下tag
　	80	卡会话计数器
　	81	卡会话标识符
　	82~8E	文件选择计数器
　	93	数字签名计数器
　	9F2X	内部progression value(X是一个指定的下标，如表示一个文件选择计数器)
　	9F3Y	外部progression value(Y是一个指定的下标，如表示一个外部时间戳)
在本文档中，上下文特定类(第一个字节为80~BF)保留其他的值


6 安全报文传送
	安全报文传送保护全部或部分的指令-响应对数据，或者连续的一串数据域(指令链，5.1.1.1，SW1=61)。来确保两个基本的安全功能：数据保密和数据验证。
	安全报文传送是通过使用一个或多个安全机制来完成的。可通过在DF中的控制参数中的一个加密机制标识模块(5.4.2)来标识一个安全机制，每一个安全机制包括一个加密算法，一个操作模式，一个密钥，一个参数(入参)，及通常有一个原始数据。

-- 数据域的传输和接收是和安全机制相交错的。这份说明不能阻止安全机制的连续分析以及安全设备对剩余的数据域的使用。
-- 两种及其以上的安全机制可使用同一个加密算法，其中操作模式可不一样。以后的补码规则也不能阻止这一特性。

6.1 SM域和SM数据对象
	根据定义，在SM格式中的任意的指令或响应数据域(同时也是SM模板(tag=7D))，是一个SM域。每一个SM域都采用BER-TLV编码格式编码，其中上下文相关类(第一个字节为80~BF)为SM数据域的保留项。在指令-响应对中，SM格式要么被隐式的选中，要么被显示的选中。换句话说，要么在发出指令前即被选中，要么包含在CLA中(5.1.1)

注：命令链 和/或 SW1为61的使用导致了指令的序列，数据域(因此，数据对象)会被分成更小的连续的数据域。在这种情况下，当使用SM格式时，在同一序列下的同一方向的连续数据域的串联即为一个SM域。

表27显示了本文档中提到的SM数据对象，所有的都在上下文相关类中。一些SM数据对象(SM tag 82、83、B0、B1)是递归的/循环的，换句话说，普通value域是一个SM域。

表27 SM数据对象
Tag	value
80 81	不采用BER-TLV格式编码的普通数据
82 83	密码(采用BER-TLV格式编码的普通数据且包含了SM数据对象，换句话说是一个SM域)
84 85	密码(采用BER-TLV格式编码的普通数据且不包含了SM数据对象)
86 87	填充字节指示符，后紧跟着密码(不采用BER-TLV编码的普通数据)
89	指令头(CLA INS P1 P2 四字节)
8E	密码校验和(至少四字节)
90 91	hash编码
92 93	证书(不采用BER-TLV编码的数据)
94 95	安全环境标识符(SEID字节)
96 97	在不安全的指令-响应对中一或两个字节，编码Ne的，(可能为空)
99	响应代码(SW1-SW2，两字节，可能为空)
9A 9B	用来计算一个数字签名的输入数据元(value域被签名)
9C 9D	公钥
9E	数字签名
A0 A1	用来计算hash编码的输入模板(该模板是被hash的)
A2	用来验证一个密码校验和的输入模板(该模板是被包含的)
A4 A5	用来认证的控制引用模板(AT)
A6 A7	用以密钥协议的控制引用模板(KAT)
A8	用以对一个数字签名的认证的控制引用模板(该模板是被签名的)
AA AB	用以计算hash编码的控制引用模板(HT)
AC AD	用以计算一个数字签名的输入模板(串联的value域是被签名的)
AE AF	用以对一个数字签名的认证的输入模板(串联的value域是被认证的)
B0 B1	采用BER-TLV编码的普通数据，包括SM数据对象，即为一个数据域
B2 B3	采用BER-TLV编码的普通数据，不包括SM数据对象
B4 B5	用以密码校验和的控制引用模板(CCT)
B6 B7	用以数字签名的控制引用模板(DST)
B8 B9	用以保密的控制引用模板(CT)
BA BB	响应描述模板
BC BD	用来计算一个数字签名的输入模板(该模板被签名)
BE	用以对一个数字签名的认证的输入模板(该模板被认证的)
在这里，保留所有其他的上下问相关类的数据对象(第一个字节从80~BF的)

在认证数据元(密码校验和，或数字签名)的计算中，每一个SM域中的每一个SM数据对象(上下文相关类)的tag域中的最后一个字节中的bit1指明了SM数据对象是否被包含(bit1=1，奇数tag，表示被包含；bit1=0，偶数tag，表示未被包含)。如果存在，在其他类的数据对象应当被包含在计算中。如果上述的计算完成，数据元应当是SM数据对象中的value域，在SM域的尾巴处以便认证(SM tag为8E,9E)使用。

有两类SM数据对象：
-- 每一个基础SM数据对象传输一个普通数据，或一个安全机制的输入或结果；
-- 每一个附加SM数据对象传输一个控制引用模板，或一个安全环境标识符，或一个响应描述模板；

注：基础SM数据对象也可被用于控制安全选项(7816-8)。附加SM数据对象也可用于管理安全环境(7.5.11)。
The global approach to security by secure messaging
shares several security-related issues with the security operations, i.e., the atomic approach to security.
附录B中对两种方法之间的协同合作进行了讨论。

6.2 基础SM数据对象
6.2.1 普通值的SM数据对象
	在SM域和不采用BER-TLV编码的数据中，对上述数据的封装是强制的。这对BER-TLV是可选的，不包含SM，数据对象。表28表示SM数据对象封装普通值。

表28 SM数据对象封装普通值
Tag	value
80 81	不采用BER-TLV格式编码的普通数据
89	指令头(CLA INS P1 P2 四字节)
96 97	在不安全的指令-响应对中一或两个字节，编码Ne的，(可能为空)
99	响应代码(SW1-SW2，两字节，可能为空)
B0 B1	采用BER-TLV编码的普通数据，包括SM数据对象，即为一个数据域
B2 B3	采用BER-TLV编码的普通数据，不包括SM数据对象

6.2.2 保密性的SM数据对象
表29 保密的SM数据对象。
Tag	value
82 83	密码(采用BER-TLV格式编码的普通数据且包含了SM数据对象，换句话说是一个SM域)
84 85	密码(采用BER-TLV格式编码的普通数据且不包含了SM数据对象)
86 87	填充字节指示符，后紧跟着密码(不采用BER-TLV编码的普通数据)
保密性的安全机制由 在操作中一个合适的模式下的一个合适的加密算法构成。在缺少明确的指示的情况下，以及保密性中没有机制被隐式的选中，则一个默认的机制应当被使用。
-- 在计算加密之前需要填充，默认的机制是一种处在”电子密码本”模式下的块加密机制，该机制需要填充。填充方式可能会对传输带来一定影响：密码(一个或多个块)可能比原始数据长。
-- 在计算加密之前不需要填充，则默认的机制是流加密。在这种情况下，将普通数据和与其相同长度的隐藏的数据进行异或，通过这种方法来对明文加密。所以，这种隐藏方式不需要填充而且密文也不用变长。

	如果普通value没有使用BER-TLV编码，那么需要指明填补 和/或 content。如果使用了填补但没说明，就要使用6.2.3.1中的规则，表30说明了填充内容指示字节。

表30 填充内容指示字节
value	含义
00	未定义
01	采用6.2.3.1说明的填充规则
02	没有填充
1X	1~4个密钥，用以加密信息，不是key (X表示0~F)
　	11 表示第一个key (比如在一个付费电视系统中的"偶"控制字)
　	12 表示第二个key (比如在一个付费电视系统中的"奇"控制字)
　	13 表示第一个key后面紧跟着第二个key (比如在一个电视付费系统中的一对控制字)
2X	加密key的密钥，不是信息 (X表示 0~F)
　	比如在一个付费电视系统中，要不一个可操作的key用以加密控制字节
　	要么一个管理key用以加密可操作的key
3X	非对称密钥对的私钥(X表示0~F)
4X	密码(X表示0~F)
80~8E	自定义的
别的值保留


6.2.3 认证用的SM数据对象

表31 认证用的SM数据对象
Tag	value
8E	密码校验和(至少四个字节)
90 91	hash
92 93	认证(未采用BER-TLV编码的数据)
9C 9D	公钥
9E	数字签名
输入数据对象(7816-8)
9A 9B	用来计算一个数字签名的输入数据元(value域被签名)
A0 A1	用来计算hash编码的输入模板(该模板是被hash的)
A2	用来验证一个密码校验和的输入模板(该模板是被包含的)
A8	用以对一个数字签名的认证的控制引用模板(该模板是被签名的)
AC AD	用以计算一个数字签名的输入模板(串联的value域是被签名的)
AE AF	用以对一个数字签名的认证的输入模板(串联的value域是被认证的)
BC BD	用来计算一个数字签名的输入模板(该模板被签名)
BE	用以对一个数字签名的认证的输入模板(该模板被认证的)


6.2.3.1 密码校验和的的数据元
	密码校验和的计算包含了一个初始化校验块、一个密钥、以及一个块加密算法和一个hash算法中的一个。

	该计算方法是系统规定的一部分。一个加密机制标识符(5.4.2)应当指定一个适合的算法标准。

	除非另有说明，下面的方法可被使用。在密钥的控制下，算法将当前k(一般为8,16,20)长的输入块转换成当前相同长度的输出块。计算过程如下所述：

初始化阶段 – 初始化阶段中应对下面描述的任意一种块作为初始化校验块：
-- 空白块，k字节全部设为00,；
-- 链块，•链接块，即，由先前计算命令(先前命令的最后一校验块)和响应(先前响应的最后一校验块)的结果，例如，由外界提供的初始值块；
-- 初始化值块，由外部传入的一个值；
-- 按照相关密钥从变换辅助数据产生的辅助块。如果辅助数据小于k字节，则它通过置为0的位为起头，直至块长度。

继续阶段 – 为了保护指令头(CLA INS P1 P2)，指令头被封装起来的(SM tag=89)。然而，如果CLA的bit8~6为000，bit4~3为11(5.1.1)，那么第一个数据块由指令头后紧跟着一个’80’字节和5个字节的’00’构成。
	密码校验和应当包含安全报文传输数据对象，该对象有一个奇数的tag，以及数据对象的第一个字节不为80~BF。在当前的校验块中，一个数据块接一个数据块的构成了这些数据对象。数据分片的规则如下：
-- 分块应在被集成的相邻数据对象之间的边界处继续进行；
-- 填充应在被集成的每个数据对象(既可后随不被集成的数据对象，也可不后随进一步的数据对象)的结束处使用。填充由一个值为‘80’的必备字节组成，如果需要可后随置为‘00’的0至(K—1)个字节，直到相应的数据块被填充直至K个字节为止。当填充字节不被发送时，鉴别的填充不影响传输。

结束阶段 – 最后的校验块是最后的输出。结束阶段从最终校验块中取出一个密码校验和(开始m字节，至少4个字节)； 

6.2.3.2 数字签名数据元
	数字签名对象方案依赖于非对称加密技术。计算包括一个hash。输入数据由一个数字签名输入的数据对象的value域构成，或者是一串这样的value域。它是由6.2.3.1定义的机制来决定的。


6.3 附加的SM数据对象

表32 附加的SM数据对象
Tag	value
94 95	安全环境标识符(SEID字节)
A4 A5	用来认证的控制引用模板(AT)
A6 A7	用以密钥协议的控制引用模板(KAT)
AA AB	用以计算hash编码的控制引用模板(HT)
B4 B5	用以密码校验和的控制引用模板(CCT)
B6 B7	用以数字签名的控制引用模板(DST)
B8 B9	用以保密的控制引用模板(CT)
BA BB	响应描述模板


6.3.1 控制引用模板
	六种控制引用模板被定义的：用来认证的控制引用模板(AT)；用以密钥协议的控制引用模板(KAT)；用以密码校验和的控制引用模板(CCT)；用以数字签名的控制引用模板(DST)；使用对称或非对称加密算法保密的控制引用模板(CT)(CT-sym,CT-asym)。
	每一个安全机制包括了一个在某一模式下的加密算法，该加密算法使用一个key和初始化数据(如有需要)。这些数据要不通过隐式引用(如在使用前就被知道)或显示引用(如通过控制引用数据对象内嵌在引用控制模板中)。在控制引用模板中，上下文相关类(第一个字节为80~BF)保留给控制引用数据对象使用。
	在一个SM域，一个控制引用模板中最后可能的位置是在适用于所述的机制的第一个数据对象之前。比如说，一个CCT有效的最后可能的位置是在 包含了计算的第一个数据对象的前面。
	在相同的机制下，每一个控制引用有效，直到新的控制引用被提供。比如，一个指令会为下一条指令提供控制引用。


6.3.2 在控制引用模板中的控制引用数据对象
	每一个控制引用模板(CRT)都是一系列控制引用数据对象的集合：一个加密机制引用，一个文件和密钥引用，一个初始化数据引用，一个使用资格，和一个仅用在保密控制引用模板下的加密目录引用。
-- 加密机制引用表示了一个在某个可选的模式下的加密算法。DF中的控制参数(表12中tag=AC)可包含一个加密机制标识符(5.4.2)。每一个标识符表示一种加密机制引用的含义；
-- 文件引用(和5.3.1.2采用同样编码)表示一个key引用合法的文件。如果没有这样的文件引用存在，则在当前DF下的key引用是合法的，可能是一个ADF。Key引用清晰的指明了需使用的key；
-- 初始化数据引用，当应用在一个密码校验和中，表明了一个初始化校验块。如果没有初始化数据引用的情况存在，并且没有初始化校验块被隐式选择，那么空块被使用。此外，在传输第一个数据对象 用作使用一个流密码保密 之前，一个用作保密的模板应提供附加的数据用作初始化隐藏的字节串的计算。
	表33列出了控制引用数据对象和其所表示的控制引用模板。所有的控制引用模板都是上下文相关类。

表33 在控制引用模板中的控制引用数据对象
tag	value	AT	KAT	HT	CCT	DST	CT-asym	CT-sym
80	加密机制引用	X	X	X	X	X	X	X
文件和key引用
81	-- 文件引用(和5.3.1.2采用同样的编码格式)	X	X	X	X	X	X	X
82	-- DF名(5.3.1.1)	X	X	X	X	X	X	X
83	-- 一个密钥的引用(为了直接使用)	X	X	X	X	　	　	X
　	-- 一个公钥的引用	X	X	X	　	X	X	　
　	-- 引用数据的资格	X	　	　	　	　	　	　
84	-- 为计算一个会话的key的引用	X	X	　	X	　	　	X
　	-- 一个私钥的引用	X	X	　	　	X	X	　
A3	key使用模板(见下面)	X	X	X	X	X	X	X
初始化数据引用：初始化校验块
85	-- L=0，空块	　	　	X	X	　	　	X
86	-- L=0，链块	　	　	X	X	　	　	X
87	-- L=0，先前的初始化value块加一	　	　	　	X	　	　	X
　	-- L=k，初始化value块	　	　	X	X	　	　	　
初始化数据应用：附加的数据元(5.4.3)
88	-- L=0，先前的交换的随机数 加一	　	　	　	X	X	X	X
　	   L>0,没有定义	　	　	　	　	　	　	　
89~8D	--L=0，自定义数据元的index	　	　	　	X	　	　	X
　	  L>0，自定义数据元的value	　	　	　	X	　	　	　
90	-- L=0，由卡提供的hash-code	　	　	X	　	X	　	　
91	--L=0，由卡提供的随机数	　	X	　	X	X	X	　
　	  L>0，随机数	　	　	　	　	X	X	　
92	--L=0，由卡提供的时间戳	　	　	X	　	X	X	　
　	  L>0，时间戳	　	　	　	　	X	X	　
93	--L=0，之前的数字签名计数器加一	　	　	X	　	X	X	X
　	  L>0，数字签名计数器	　	　	　	　	X	X	X
94	为获取一个key的随机数或数据元	X	　	　	X	　	　	X
95	使用资格字节(见下面)	X	X	　	X	X	X	X
8E	加密数据引用(见下面)	　	　	　	　	　	X	X
在本文档中，上下文相关类(第一个字节为80~BF)中其他的值保留
一个CRT会包含一个业内数据对象，比如在AT中证书持有者的授权(tag=5F4C,6.3.4),
HT或DST中的头部的列或扩展头部列(tag=5D和4D，8.5.1)


在任意控制引用模板中，一个key的使用模板(tag=A3)将一个文件及key引用与一个key使用计数器和/或一个key重操作计数器相关联起来。(表34)

表34 key使用数据对象
Tag	value
A3	key使用数据对象和下列tag的集合
　	80~84	文件和key应用，如表33定义的
　	90	key使用计数器
　	91	key重操作计数器
在本文档中，上下文特定类(第一个字节为80~BF)保留其他的值

	在给AT、KAT、CCT、CT、DST使用的控制引用模板中，一个使用资格字节(tag=95)可说明了一个模板的使用，要么作为一个安全条件(5.4.3.2和表23)使用，要么符合MANAGE SECURITY ENVIROMENT指令(7.5.11)。表35显示了使用资格字节。

表35 使用资格字节
b8	b7	b6	b5	b4	b3	b2	b1	含义
1	-	-	-	-	-	-	-	验证(DST,CCT),加密(CT),外部认证(AT),key协议(KAT)
-	1	-	-	-	-	-	-	计算(DST,CCT),解密(CT),内部认证(AT),key协议(KAT)
-	-	1	-	-	-	-	-	在响应数据域的安全报文传输(CCT,CT,DST)
-	-	-	1	-	-	-	-	在指令数据域的安全报文传输(CCT,CT,DST)
-	-	-	-	1	-	-	-	基于密码的用户认证(AT)
-	-	-	-	-	1	-	-	基于biometry的用户认证(AT)
-	-	-	-	-	-	x	x	xxxx xx00(别的值保留)

	在用来加密(CT)的控制引用模板中，一个密码content引用(tag=8E)指明了密码的content。Value域中的第一个字节是强制的；它的名字是密码描述符字节。表36显示了密码描述字节。

表36 密码描述字节
value	含义
00	未定义
1X	1~4个密钥，用以加密信息，不是key (X表示0~F)
　	11 表示第一个key (比如在一个付费电视系统中的"偶"控制字)
　	12 表示第二个key (比如在一个付费电视系统中的"奇"控制字)
　	13 表示第一个key后面紧跟着第二个key (比如在一个电视付费系统中的一对控制字)
2X	加密key的密钥，不是信息 (X表示 0~F)
　	比如在一个付费电视系统中，要不一个可操作的key用以加密控制字节
　	要么一个管理key用以加密可操作的key
3X	非对称密钥对的私钥(X表示0~F)
4X	密码(X表示0~F)
80~8E	自定义的
别的值保留


6.3.3 安全环境
	本节定义了安全环境(SE)，用来引用加密算法，操作模式，协议，程序，key以及安全报文传输和安全操作所需的任何附加的数据。一个SE包括了保存在卡片中的数据元，或者一些计算得到的结果，由指定算法处理。一个SE可能会包含一个在这样的环境下对非稳定数据初始化的处理机制。如一个会话key。一个SE可提供一个处理计算结果的方向。如保存在卡片中。一个业内SE模板(tag=7B)描述一个SE。

SE 标识符 –- 一个SE标识符(SEID字节)会引用任意一个安全环境，比如为了安全报文传输和通过MANAGE SECURITY ENVIRONMENT指令保存和重复保存数据。
-- 除非在应用中另有定义，value=00表明了一个空的环境，其中没有定义安全报文传输和没有定义认证；
-- value=FF表明在该环境下没有操作进行；
-- 除非在应用中另有定义，value=01是被默认SE保留的，总是可用的。本条款没有描述默认SE，认为是空的；
-- value=EF是保留的；

组成部分 – CRT可能描述了SE的多个组成部分。任何 在定义的环境下指定使用机制的相关的控制引用(文件、key、数据)应当解决 使用该机制前的DF选择相关问题。绝对控制引用(如绝对路径)需要不被解决。在一个SE下，组成部分会有两块：指令数据域在SM中有效；以及SM有响应数据域。
	在卡操作的任意时刻，一个当前的SE应当是激活的。要么是默认的SE，要么是卡运行后的指令的结果。当前的SE包好了如下一个或多个的部分：
-- 属于与当前DF相关的默认SE下的数据；
-- 在指令中使用安全报文传输的传输数据；
-- 在MANAGE SECURITY ENVIRONMENT指令中传输的数据；
-- 在MANAGE SECURITY ENVIRONMENT指令中被SEID字节调用的数据；

	当前SE是合法的，直到一个热复位出现或通讯失效(7816-3)，一个context的改变(如通过选择一个别的ADF)或一个MANAGE SECURITY ENVIRONMENT指令设置或当前SE的替换。

	在SM中，控制引用数据对象在CRT中传输会优先于 在当前SE中的别的控制应用数据对象。

证书持有者的授权 – 授权过程会用到卡认证的证书，换句话说，即为那些能够被解释、能够通过VERIFY CERTIFICATE操作，使用公钥被卡片验证的模板。在这样的证书下，一个证书持有者的授权(一个规则标识符)会传输一个业内通过tag=5F4C数据元引用。如果这样一个数据元在安全条件中被用来完成访问数据或访问函数，那么数据对象(tag=5F4C)应当在AT的控制引用模板存在，用来AT描述一个授权过程。

	注：在7816-9的第一版中，tag=5F4B引用了一个证书持有者的授权(5个或多个字节的数据元)。在7816-6的修正版1中，tag=5F4B引用了一个完整循环厂商的标识符(一字节数据元)。因此，在7816中tag=5F4B被放弃使用。

访问控制 – 卡片会存储安全环境，用于在EF下的访问控制(tag=8D，表12)，包含了业内SE模板(tag=7B)。在业内SE模板中，一个上下文相关类是被安全环境数据对象所保留的。如表37所列，每一个所包含的SE，安全环境模板包含了一个SEID字节数据对象(tag=80)，一个可选的LCS字节数据对象(tag=8A)，一个或多个可选的加密机制标识符模板(tag=AC)和一个或多个CRT(tag=A4,A6,AA,B4,B6,B8，作为SMtag)。

表37 安全环境数据对象
Tag	value
7B	安全环境数据对象的集合，跟着如下tag
　	80	SEID字节，强制的
　	8A	LCS字节(表13,5.3.3.2)，可选的
　	AC	加密机制标识符模板(5.4.2)，可选的
　	A4 A6 AA B4 B6 B8	CRT(6.3.1)
在本文档中，上下文特定类(第一个字节为80~BF)保留其他的值

	如果在一个SE模板中存在CLS字节，则CLS字节数据对象表示了SE的生命周期状态是合法的。如果SE被用作访问控制，如访问一个文件，则文件的LCS字节和SE的LCS字节必须匹配。如果没有LCS字节数据对象存在，则对已激活的操作态，SE是合法的。

	在SE模板中，如果一个CRT传输一些相同tag的数据对象(如数据对象表示一个key引用)，则至少有一个数据对象不得不被实现(OR 条件)。

SE检索 – 任意在当前SE下的CRT会被一条GET DATA指令恢复，其指令中P1-P2为004D(扩展头列，8.5.1)。一个指令数据域由包含了一个或多个对的SE模板(tag=7B)，每一个包含一个CRT tag紧跟着80(8.5.1 定义了在扩展头列中len=80)。

6.3.4 响应描述模板
	每一个指令数据域包含一个响应描述模板。如果再指令数据域中存在，则该响应描述模板会表示 在响应数据域中需要一个SM数据对象。在响应描述模板的内部，安全机制还没有被应用；接收的实体将使用它们来构造一个响应数据域。使用处理在指令数据域中的安全项目(算法，操作模式，key和初始化数据)与 那些用作生产响应数据域 不同。下面的规则会被使用：
-- 卡片会被原始的基础的SM数据对象填充；
-- 每一个在响应描述模板中存在的CRT也会在响应中相同位置存在，和用来安全机制、文件、key的控制引用数据对象一样；
	如果响应描述模板提供额外的数据，则在响应中对应的数据对象为空；
	如果一个空的应用数据对象用作额外数据是在响应描述模板中存在，则它需要在响应中填满。
-- 通过相关的安全机制，以及选中的安全item，卡片需计算出所需的基础SM数据对象。


6.4 SM对指令-响应的影响
图5 指令-响应对
 

	为保护一个行业内的指令-响应(5.1.1.)对，需要遵守如下规则。换句话说，不论是CLA中bit8~6为000，且bit4从0至1，还是CLA中bit8~7为01，且bit6从0至1，都要遵守如下规则。CLA* 表示在CLA中采用安全报文传输。
-- 安全的指令数据域是一个SM域；它应该遵守如下规则：
	如果一个指令数据域是存在的(Nc>0)，则要不是一个普通value数据域(SM tag=80 81 B2 B3)，要不是一个长度为Nc字节的加密的数据对象(SM tag=84 85 86 87)；
	指令头(四字节)需要被密封从而达到保护的作用(SM tag=89)；
	如果一个Le域存在，则一个新的Le域(仅包含设为00字节的)以及一个Le数据对象(SM tag=96 97)也应当存在的。Le为00或Le为空均表示最大值，换句话说根据Le是否是短的还是扩展的来表示值是256还是65536；
-- 一个安全的响应数据域是一个SM域；它应该遵守如下规则：
	如果存在，一个普通value域数据对象(SM tag=80 81 B2 B3)，或一个传输响应数据字节的加密的数据对象(SM tag=84 85 86 87)；
	如果存在，一个处理状态下的数据对象(SM tag=99)传输SW1-SW2需要密封用来保护。空的处理状态下的数据对象表示SW1-SW2设为9000。

图6 安全的指令-响应对
 

	当INS的bit1设为1时(奇数INS，5.1.2)，不安全的数据对象采用BER-TLV编码格式编码，SM tag=B2 B3 84 85可被用作它们的封装。否则，用作保护的数据域的格式不总是显示的，SM tag=80 81 86 87推荐使用。

-- 一个安全的数据域是SM域；它们可能包含更多的或其他的SM数据对象，比如一个加密校验和(SM tag=8E)，或是末尾的一个数字签名(SM tag=9E)
-- 一个新的Lc域用来表示在安全指令数据域中的字节数；
-- 如果不期望有响应数据，则一个新的Le域为空；否则，它会被置00；
-- 一个响应尾表明了在处理了一个安全的指令后的接收实体的状态。下面的错误可能会发生：
	如果SW1-SW2为6987，表示期望的安全报文传输的数据对象丢失了；
	如果SW1-SW2WEI 6988，则一个安全报文传输数据对象是错误的；

附录B举例说明了安全报文传输。
























